name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

env:
  GO_VERSION: '1.24'

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write  # For security scanning

jobs:
  # Job 1: Validate commits and PR
  validate:
    name: Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Validate PR title follows conventional commits
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            deps
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}" 
            didn't match the configured pattern. Please ensure that the subject 
            starts with a lowercase letter.

      # Validate all commits in PR
      - name: Validate commits
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: .commitlintrc.json
          failOnWarnings: true

  # Job 2: Tests and Coverage
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        go: [ '1.23', '1.24' ]  # Test on current and previous stable

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true
          cache-dependency-path: go.sum

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}')
          echo "### üìä Test Coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.24'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

  # Job 3: Code Quality
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8  # v8 es la √∫ltima estable
        with:
          version: latest  # Siempre usa la √∫ltima versi√≥n
          args: --timeout=5m  # 3 min es suficiente para proyectos peque√±os
          only-new-issues: true  # Solo muestra issues nuevos en PRs
          skip-cache: false  # La action maneja su propio cache eficientemente

      - name: Go mod tidy check
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  # Job 4: Security Scanning
  security:
    name: Security
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'