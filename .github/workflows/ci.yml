name: CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

env:
  GO_VERSION: '1.24'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Un solo job que hace todo - m치s r치pido y eficiente
  validate-and-test:
    name: Validate & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para el an치lisis de commits

      # Validaci칩n de PR title solo si es PR
      - name: Validate PR title
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Tipos m칤nimos necesarios
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            deps
            revert

      # Setup Go con cache autom치tico
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Download dependencies una sola vez
      - name: Get dependencies
        run: |
          go mod download
          go mod verify

      # Tests con coverage
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      # Linting - solo lo esencial
      - name: Run linting
        run: |
          # Instalar golangci-lint localmente para control de versi칩n
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.3.0
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m

      # Build para validar que compila
      - name: Build
        run: go build -v ./...

      # Comentario autom치tico con coverage en PR
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.out', 'utf8');
            const lines = coverage.split('\n');
            const lastLine = lines[lines.length - 2];
            const match = lastLine.match(/total:\s+\(statements\)\s+(\d+\.\d+)%/);
            const percent = match ? match[1] : 'unknown';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `游늵 **Test Coverage:** ${percent}%`
            });