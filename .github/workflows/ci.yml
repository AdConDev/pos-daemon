name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

env:
  GO_VERSION: '1.24'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Job Ãºnico para mÃ¡xima eficiencia
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para el anÃ¡lisis de commits

      # ValidaciÃ³n de conventional commits en el tÃ­tulo del PR
      - name: Validate PR title
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Solo los tipos que realmente usas
          types: |
            feat
            fix
            docs
            refactor
            perf
            test
            ci
            chore
            deps
            revert
            style
            build
          # No validar scopes para simplicidad
          requireScope: false
          # Permitir ! para breaking changes
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            El tÃ­tulo debe empezar con minÃºscula.
            Ejemplo: "feat: add new feature"

      # Setup Go con cache automÃ¡tico
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go.sum

      # Tests primero (fail fast si hay errores)
      - name: Run tests
        run: |
          go test -v -race -short -coverprofile=coverage.txt ./...
          COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}')
          echo "### ðŸ“Š Test Coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY

      # Linting con la action oficial - MUCHO mÃ¡s eficiente
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8  # v8 es la Ãºltima estable
        with:
          version: latest  # Siempre usa la Ãºltima versiÃ³n
          args: --timeout=3m  # 3 min es suficiente para proyectos pequeÃ±os
          only-new-issues: true  # Solo muestra issues nuevos en PRs
          skip-cache: false  # La action maneja su propio cache eficientemente

      # Build final para validar
      - name: Build
        run: |
          go build -v ./...
          echo "âœ… Build successful" >> $GITHUB_STEP_SUMMARY