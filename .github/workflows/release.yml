name: Release

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip release]'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g standard-version
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "bump=${{ inputs.release-type }}" >> $GITHUB_OUTPUT
          else
            # Analizar commits para determinar el bump automÃ¡tico
            if git log -1 --pretty=%B | grep -q "BREAKING CHANGE"; then
              echo "bump=major" >> $GITHUB_OUTPUT
            elif git log -1 --pretty=%B | grep -q "^feat"; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            else
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version and create changelog
        id: changelog
        run: |
          standard-version --release-as ${{ steps.version.outputs.bump }} --skip.commit --skip.tag
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Run tests before release
        run: go test -v ./...

      - name: Build binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -o dist/pos-daemon-linux-amd64 .
          GOOS=windows GOARCH=amd64 go build -o dist/pos-daemon-windows-amd64.exe .
          GOOS=darwin GOARCH=amd64 go build -o dist/pos-daemon-darwin-amd64 .

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "chore(release): ${{ steps.changelog.outputs.tag }}"
          git tag ${{ steps.changelog.outputs.tag }}
          git push origin master --follow-tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          name: Release ${{ steps.changelog.outputs.tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Go Module Proxy
        run: |
          GOPROXY=proxy.golang.org go list -m pos-daemon.adcon.dev@${{ steps.changelog.outputs.tag }}