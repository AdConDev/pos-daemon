name: Auto Release

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    # Skip si ya es un commit de release
    if: |
      !contains(github.event.head_commit.message, 'chore(release)') &&
      !contains(github.event.head_commit.message, '[skip ci]')

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install standard-version
        run: npm install -g standard-version

      # Análisis simple de commits
      - name: Check if release needed
        id: check
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Contar tipos de commits
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          
          if echo "$COMMITS" | grep -q "^feat\|^fix\|^perf\|BREAKING CHANGE"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          
            # Determinar tipo de release
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|^[a-z]*!:"; then
              echo "release_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^feat"; then
              echo "release_type=minor" >> $GITHUB_OUTPUT
            else
              echo "release_type=patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "📝 No changes requiring release" >> $GITHUB_STEP_SUMMARY
          fi

      # Generar release
      - name: Create Release
        if: steps.check.outputs.should_release == 'true'
        id: release
        run: |
          # Generar version y changelog
          standard-version --release-as ${{ steps.check.outputs.release_type }}
          
          # Obtener nueva versión
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Push con tags
          git push --follow-tags origin $GITHUB_REF_NAME

      # Crear GitHub Release
      - name: GitHub Release
        if: steps.check.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release.outputs.version }}
          name: v${{ steps.release.outputs.version }}
          body_path: CHANGELOG.md
          generate_release_notes: false